/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common"

export declare namespace Bets {
  export type BetStruct = {
    id: PromiseOrValue<BigNumberish>
    user: PromiseOrValue<string>
    market: PromiseOrValue<string>
    amount: PromiseOrValue<BigNumberish>
    createdAt: PromiseOrValue<BigNumberish>
  }

  export type BetStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber
    user: string
    market: string
    amount: BigNumber
    createdAt: BigNumber
  }

  export type MatchStruct = {
    id: PromiseOrValue<BigNumberish>
    status: PromiseOrValue<BigNumberish>
    wonMarkets: PromiseOrValue<string>[]
    markets: PromiseOrValue<string>[][]
    startAt: PromiseOrValue<BigNumberish>
  }

  export type MatchStructOutput = [
    BigNumber,
    number,
    string[],
    string[][],
    BigNumber
  ] & {
    id: BigNumber
    status: number
    wonMarkets: string[]
    markets: string[][]
    startAt: BigNumber
  }
}

export interface BetsInterface extends utils.Interface {
  functions: {
    "addBet(uint256,string)": FunctionFragment
    "bets(uint256,uint256)": FunctionFragment
    "changeStateContract(bool)": FunctionFragment
    "createMatch(string[][],uint256)": FunctionFragment
    "getBetsByMatchId(uint256)": FunctionFragment
    "getMatchesByIds(uint256[])": FunctionFragment
    "getMyMatches(uint8,uint64)": FunctionFragment
    "isPaused()": FunctionFragment
    "matchId()": FunctionFragment
    "matches(uint256)": FunctionFragment
    "owner()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "updateMatch(uint256,uint8,string[],uint256)": FunctionFragment
    "userMatches(address,uint256)": FunctionFragment
    "withdrawByMatchId(uint256)": FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | "addBet"
      | "bets"
      | "changeStateContract"
      | "createMatch"
      | "getBetsByMatchId"
      | "getMatchesByIds"
      | "getMyMatches"
      | "isPaused"
      | "matchId"
      | "matches"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateMatch"
      | "userMatches"
      | "withdrawByMatchId"
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: "addBet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: "bets",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "changeStateContract",
    values: [PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: "createMatch",
    values: [PromiseOrValue<string>[][], PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "getBetsByMatchId",
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "getMatchesByIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: "getMyMatches",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string
  encodeFunctionData(functionFragment: "matchId", values?: undefined): string
  encodeFunctionData(
    functionFragment: "matches",
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: "updateMatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: "userMatches",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: "withdrawByMatchId",
    values: [PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(functionFragment: "addBet", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "changeStateContract",
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: "createMatch", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "getBetsByMatchId",
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: "getMatchesByIds",
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: "getMyMatches",
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "matchId", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "matches", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: "updateMatch", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "userMatches", data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: "withdrawByMatchId",
    data: BytesLike
  ): Result

  events: {
    "AddBet(uint256,uint256,uint256,string,address)": EventFragment
    "CreateMatch(uint256,string[][],uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "UpdateMatch(uint256,uint8,string[],uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "AddBet"): EventFragment
  getEvent(nameOrSignatureOrTopic: "CreateMatch"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "UpdateMatch"): EventFragment
}

export interface AddBetEventObject {
  betId: BigNumber
  matchId: BigNumber
  amount: BigNumber
  market: string
  user: string
}
export type AddBetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  AddBetEventObject
>

export type AddBetEventFilter = TypedEventFilter<AddBetEvent>

export interface CreateMatchEventObject {
  id: BigNumber
  marketsList: string[][]
  startAt: BigNumber
}
export type CreateMatchEvent = TypedEvent<
  [BigNumber, string[][], BigNumber],
  CreateMatchEventObject
>

export type CreateMatchEventFilter = TypedEventFilter<CreateMatchEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>

export interface UpdateMatchEventObject {
  id: BigNumber
  status: number
  wonMarkets: string[]
  startAt: BigNumber
}
export type UpdateMatchEvent = TypedEvent<
  [BigNumber, number, string[], BigNumber],
  UpdateMatchEventObject
>

export type UpdateMatchEventFilter = TypedEventFilter<UpdateMatchEvent>

export interface Bets extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BetsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addBet(
      _matchId: PromiseOrValue<BigNumberish>,
      _market: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber
        user: string
        market: string
        amount: BigNumber
        createdAt: BigNumber
      }
    >

    changeStateContract(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    createMatch(
      marketsList: PromiseOrValue<string>[][],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getBetsByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Bets.BetStructOutput[]] & { findBets: Bets.BetStructOutput[] }>

    getMatchesByIds(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [Bets.MatchStructOutput[]] & { findMatches: Bets.MatchStructOutput[] }
    >

    getMyMatches(
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [Bets.MatchStructOutput[]] & { findMatches: Bets.MatchStructOutput[] }
    >

    isPaused(overrides?: CallOverrides): Promise<[boolean]>

    matchId(overrides?: CallOverrides): Promise<[BigNumber]>

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        id: BigNumber
        status: number
        startAt: BigNumber
      }
    >

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateMatch(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      wonMarkets: PromiseOrValue<string>[],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    userMatches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    withdrawByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  addBet(
    _matchId: PromiseOrValue<BigNumberish>,
    _market: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  bets(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber
      user: string
      market: string
      amount: BigNumber
      createdAt: BigNumber
    }
  >

  changeStateContract(
    state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  createMatch(
    marketsList: PromiseOrValue<string>[][],
    startAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getBetsByMatchId(
    _matchId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Bets.BetStructOutput[]>

  getMatchesByIds(
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<Bets.MatchStructOutput[]>

  getMyMatches(
    limit: PromiseOrValue<BigNumberish>,
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Bets.MatchStructOutput[]>

  isPaused(overrides?: CallOverrides): Promise<boolean>

  matchId(overrides?: CallOverrides): Promise<BigNumber>

  matches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber] & {
      id: BigNumber
      status: number
      startAt: BigNumber
    }
  >

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateMatch(
    id: PromiseOrValue<BigNumberish>,
    status: PromiseOrValue<BigNumberish>,
    wonMarkets: PromiseOrValue<string>[],
    startAt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  userMatches(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  withdrawByMatchId(
    _matchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    addBet(
      _matchId: PromiseOrValue<BigNumberish>,
      _market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        id: BigNumber
        user: string
        market: string
        amount: BigNumber
        createdAt: BigNumber
      }
    >

    changeStateContract(
      state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    createMatch(
      marketsList: PromiseOrValue<string>[][],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getBetsByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Bets.BetStructOutput[]>

    getMatchesByIds(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<Bets.MatchStructOutput[]>

    getMyMatches(
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Bets.MatchStructOutput[]>

    isPaused(overrides?: CallOverrides): Promise<boolean>

    matchId(overrides?: CallOverrides): Promise<BigNumber>

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber] & {
        id: BigNumber
        status: number
        startAt: BigNumber
      }
    >

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    updateMatch(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      wonMarkets: PromiseOrValue<string>[],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    userMatches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    "AddBet(uint256,uint256,uint256,string,address)"(
      betId?: null,
      matchId?: null,
      amount?: null,
      market?: null,
      user?: null
    ): AddBetEventFilter
    AddBet(
      betId?: null,
      matchId?: null,
      amount?: null,
      market?: null,
      user?: null
    ): AddBetEventFilter

    "CreateMatch(uint256,string[][],uint256)"(
      id?: null,
      marketsList?: null,
      startAt?: null
    ): CreateMatchEventFilter
    CreateMatch(
      id?: null,
      marketsList?: null,
      startAt?: null
    ): CreateMatchEventFilter

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    "UpdateMatch(uint256,uint8,string[],uint256)"(
      id?: null,
      status?: null,
      wonMarkets?: null,
      startAt?: null
    ): UpdateMatchEventFilter
    UpdateMatch(
      id?: null,
      status?: null,
      wonMarkets?: null,
      startAt?: null
    ): UpdateMatchEventFilter
  }

  estimateGas: {
    addBet(
      _matchId: PromiseOrValue<BigNumberish>,
      _market: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    changeStateContract(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    createMatch(
      marketsList: PromiseOrValue<string>[][],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getBetsByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getMatchesByIds(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getMyMatches(
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isPaused(overrides?: CallOverrides): Promise<BigNumber>

    matchId(overrides?: CallOverrides): Promise<BigNumber>

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateMatch(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      wonMarkets: PromiseOrValue<string>[],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    userMatches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addBet(
      _matchId: PromiseOrValue<BigNumberish>,
      _market: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    bets(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    changeStateContract(
      state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    createMatch(
      marketsList: PromiseOrValue<string>[][],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getBetsByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getMatchesByIds(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getMyMatches(
      limit: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    matchId(overrides?: CallOverrides): Promise<PopulatedTransaction>

    matches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateMatch(
      id: PromiseOrValue<BigNumberish>,
      status: PromiseOrValue<BigNumberish>,
      wonMarkets: PromiseOrValue<string>[],
      startAt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    userMatches(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdrawByMatchId(
      _matchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
